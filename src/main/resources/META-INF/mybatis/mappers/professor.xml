<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="kr.ac.ju.dao.ProfessorDao">
	
	<resultMap type="professor" id="professorResultMap">
		<result property="no" column="professor_no"/>
		<result property="major.no" column="major_no"/>
		<result property="major.name" column="major_name"/>
		<result property="position.id" column="position_id"/>
		<result property="position.name" column="position_name"/>
		<result property="name" column="professor_name"/>
		<result property="password" column="professor_password"/>
		<result property="birth" column="professor_birth"/>
		<result property="gender" column="professor_gender"/>
		<result property="email" column="professor_email"/>
		<result property="phoneNumber" column="professor_phone_number"/>
		<result property="address" column="professor_address"/>
		<result property="hireDate" column="professor_hire_date"/>
		<result property="salary" column="professor_salary"/>
		<result property="status" column="professor_status"/>
		<result property="createDate" column="professor_create_date"/>
		<result property="photoName" column="professor_photo_name"/>
	</resultMap>
	
	<!-- 번호로 교수조회 -->
	<select id="getProfessorByNo" parameterType="int" resultMap="professorResultMap">
		select *
		from professors P, majors M, position O
		where P.professor_no = #{value}
		and P.major_no = M.major_no
		and P.position_id = O.position_id
	</select>
	
	<!-- 강의 갯수 조회 -->
	<select id="getAllClassCount" parameterType="int" resultType="int">
		select count(*)
		from courses
		where professor_no = #{value}
	</select>
	<!-- 교수번호로 교과목 조회 -->
	<select id="getAllClassByProfId" parameterType="int" resultType="course">
		select 
			c.course_no no,
			c.professor_no "professor.no",
			f.professor_name "professor.name",
			c.major_no "major.no",
			m.major_name "major.name",
			c.course_name name,
			c.course_credit credit,
			c.course_year year,
			c.course_term term,
			c.course_must_yn mustYn,
			c.course_pass_yn passYn,
			c.course_create_date createDate,
			c.course_quota quota,
			c.course_count count
		from
			courses c, majors m, professors f
		where
			c.professor_no = #{value}
		and
			c.major_no = m.major_no
		and
			c.professor_no = f.professor_no
	</select>
	<!-- 교수번호로 년도, 학기별 강의 조회 -->
	<select id="getTermClassByProfId" parameterType="map" resultType="course">
		select 
			c.course_no no,
			c.professor_no "professor.no",
			f.professor_name "professor.name",
			c.major_no "major.no",
			m.major_name "major.name",
			c.course_name name,
			c.course_credit credit,
			c.course_year year,
			c.course_term term,
			c.course_must_yn mustYn,
			c.course_pass_yn passYn,
			c.course_create_date createDate,
			c.course_quota quota,
			c.course_count count
		from
			courses c, majors m, professors f
		where
			c.professor_no = #{profId}
		and
			c.major_no = m.major_no
		and
			c.professor_no = f.professor_no
		and
			c.course_term = #{term}
		and
			c.course_year = #{year}
	</select>
	
	<!-- 교과목 번호로 단원조회 -->
	<select id="getCoursePartByCourseNo" parameterType="int" resultType="coursePart">
		select 
			c.course_no "course.no",
			c.professor_no "course.professor.no",
			c.major_no "course.major.no",
			c.course_name "course.name",
			c.course_credit "course.credit",
			c.course_year "course.year",
			c.course_term "course.term",
			c.course_must_yn "course.mustYn",
			c.course_pass_yn "course.passYn",
			c.course_create_date "course.createDate",
			c.course_quota "course.quota",
			c.course_count "course.count",
            p.course_part_no no,
            p.course_part_name name,
            p.course_part_week week
		from
			courses c, course_parts p
		where
			c.course_no = #{value}
        and
            c.course_no = p.course_no
	</select>
	<!-- 교과목번호로 교과목 조회 -->
	<select id="getCourseByCourseNo" resultType="course" parameterType="int">
		select 
			c.course_no no,
			c.professor_no "professor.no",
			f.professor_name "professor.name",
			c.major_no "major.no",
			m.major_name "major.name",
			c.course_name name,
			c.course_credit credit,
			c.course_year year,
			c.course_term term,
			c.course_must_yn mustYn,
			c.course_pass_yn passYn,
			c.course_create_date createDate,
			c.course_quota quota,
			c.course_count count
		from
			courses c, majors m, professors f
		where
			c.course_no = #{value}
		and
			c.major_no = m.major_no
		and
			c.professor_no = f.professor_no
	</select>
	<!-- 교수번호로 년도 조회 -->
	<select id="getYearByProfessorNo" resultType="course" parameterType="int">
		select 
			distinct c.course_year year
		from
			courses c, majors m
		where
			c.professor_no = #{value}
		and
			c.major_no = m.major_no
	</select>
	<!-- 교수번호로 학과이름 조회 -->
	<select id="getMajorByProfessorNo" resultType="course" parameterType="int">
		select    
		    distinct m.major_name "major.name"
		from
			courses c, majors m
		where
			c.professor_no = #{value}
		and
			c.major_no = m.major_no
	</select>
	<!-- 검색조건으로 조회 -->
	<select id="searchByOptions" resultType="course" parameterType="map">
		select 
			*
		from
			(
				select
					c.course_no no,
					c.professor_no "professor.no",
					f.professor_name "professor.name",
					c.major_no "major.no",
					m.major_name "major.name",
					c.course_name name,
					c.course_credit credit,
					c.course_year year,
					c.course_term term,
					c.course_must_yn mustYn,
					c.course_pass_yn passYn,
					c.course_create_date createDate,
					c.course_quota quota,
					c.course_count count,
					row_number() over (order by c.course_no asc) rn
				from
					courses c, majors m, professors f
				<where>
					c.professor_no = #{profId}
					
					and
                        c.major_no = m.major_no
                    and
                        c.professor_no = f.professor_no
					<if test="year != null">
						and c.course_year = #{year}
					</if>
					<if test="term != null">
						and c.course_term = #{term}
					</if>
					<if test="credit != null">
						and c.course_credit = #{credit}
					</if>
					<if test="part != null">
						and m.major_name = #{part}
					</if>
					<if test="courseNum != null">
						and c.course_no like '%' || #{courseNum} ||'%'
					</if>
					<if test="courseName != null">
						and c.course_name like '%' || #{courseName} ||'%'
					</if>
				</where>
			)
		where
			rn >= #{beginIndex}
		and
			rn &lt;= #{endIndex}
		order by no desc
			
	</select>
	
	<!-- 조건별로 갯수조회 -->
	<select id="getRows" parameterType="map" resultType="int">
		select
			count(*)
		from
			courses c, majors m, professors f
		<where>
			c.professor_no = #{profId}
			and
                c.major_no = m.major_no
            and
                c.professor_no = f.professor_no
			<if test="year != null">
				and c.course_year = #{year}
			</if>
			<if test="term != null">
				and c.course_term = #{term}
			</if>
			<if test="credit != null">
				and c.course_credit = #{credit}
			</if>
			<if test="part != null">
				and m.major_name = #{part}
			</if>
			<if test="courseNum != null">
				and c.course_no like '%' || #{courseNum} ||'%'
			</if>
			<if test="courseName != null">
				and c.course_name like '%' || #{courseName} ||'%'
			</if>
		</where>	
	</select>
	
	<!-- 시험 등록 -->
	<insert id="addTest" parameterType="test">
		insert into tests
		(test_no, course_no, test_status, test_file_name)
		values 
		(test_seq.nextval, #{no}, #{status}, #{fileName})
	</insert>
	
	<!-- 비디오 등록 -->
	<insert id="addVideo" parameterType="cla">
		insert into classes
		(class_no, course_part_no, class_name, class_video_name)
		values
		(class_seq.nextval, #{no}, #{name}, #{videoName})
	</insert>
	<!-- 강의계획서 등록 -->
	<insert id='addCoursePlan' parameterType="coursePlan">
		insert into course_plans
		(course_plan_no, professor_no, course_no, plan_goal, plan_summary, plan_main_book, plan_sub_book1, plan_sub_book2, plan_sub_book3, plan_test_process)
		values
		(#{no}, #{professor.no}, #{course.no}, #{goal}, #{summary}, #{mainBook}, #{subBook1}, #{subBook2}, #{subBook3}, #{testProcess})
	</insert>
	<!-- 단원 등록 -->
	<insert id="addCoursePart" parameterType="coursePart">
		insert into course_parts
		(course_part_no, course_no, course_part_name, course_part_week, course_part_contents)
		values
		(course_part_seq.nextval, #{course.no}, #{name}, #{week}, #{contents})
	</insert>
	<!-- 교수번호로 학과조회 -->
	<select id="getMajor" parameterType="int" resultType="major">
		select
   			M.major_name as name, M.major_no as no, P.professor_no as "professor.no" 
		from
		    professors P, majors M
		where
		    P.major_no  = M.major_no
		and
		    P.professor_no = #{value}
	</select>
	<!-- 강의추가 -->
	<insert id="addCourse" parameterType="course">
		insert into courses
		(course_no, professor_no, major_no, course_name, course_credit, course_year, course_term, course_must_yn, course_quota)
		values
		(#{no}, #{professor.no}, #{major.no}, #{name}, #{credit}, #{year}, #{term}, #{mustYn}, #{quota})
	</insert>
	<!-- 강의수정 -->
	<update id="updateCourse" parameterType="course">
		update courses
		set 
		    course_name = #{name}, 
		    course_credit = #{credit}, 
		    course_year = #{year}, 
		    course_term = #{term}, 
		    course_must_yn = #{mustYn}, 
		    course_quota = #{quota}
		where course_no = #{no}
	</update>
	<!-- 강의삭제 -->
	<delete id="deleteCourse" parameterType="int">
		delete from courses
		where course_no = #{value}
	</delete>
	<!-- 교과목번호로 학생, 점수, 성적조회 -->
	<select id="getStudentsByCourseNo" parameterType="int" resultType="map">
		select
		     Y.student_name name,
		    X.student_no no,
            X.course_no sno,
		    X.total_score score,
		    A.course_attend_record record
		from
		    (select
		         R.student_no student_no,
                C.course_no course_no,
		        sum(R.result_score) total_score	
		    from
		        courses C, tests T, test_results R
		    where
		        C.course_no = T.course_no
		    and
		        T.test_no = R.test_no
		    and
		        C.course_no = #{value}
		    group by
		      	R.student_no, C.course_no
			) X, students Y, course_attends A
		where
		    X.student_no = Y.student_no
    	and
            A.course_no = X.course_no
        and
            A.student_no = X.student_no
        order by x.student_no asc
        
	</select>
	<!-- 성적입력 -->
	<update id="updateRecordByCourseNoAndStudNo" parameterType="courseAttend">
		update course_attends
		set course_attend_record = #{record}
		where student_no = #{student.no}
		and course_no = #{course.no}
	</update>
	<!-- 교수번호로 강의평가 결과 조회 -->
	<select id="getOpinionByProfId" parameterType="map" resultType="courseOpinion">
		select 
		    c.course_name "course.name", 
		    c.course_credit "course.credit",
		    c.course_no "course.no",
		    c.course_term "course.term", 
		    c.course_year "course.year",
		    x.opinion_question01 "q01",
		    x.opinion_question02 "q02",
		    x.opinion_question03 "q03",
		    x.opinion_question04 "q04",
		    x.opinion_question05 "q05",
		    x.opinion_question06 "q06", 
		    x.opinion_question07 "q07", 
		    x.opinion_question08 "q08", 
		    x.opinion_question09 "q09", 
		    x.opinion_question10 "q10", 
		    x.opinion_question11 "q11"
		from
		    course_opinions x, courses c
		where 
		    c.course_no = x.course_no
		and
		    c.professor_no = #{profId}
		minus
		select 
		    c.course_name, 
		    c.course_credit,
		    c.course_no,
		    c.course_term, 
		    c.course_year,
		    x.opinion_question01,
		    x.opinion_question02,
		    x.opinion_question03,
		    x.opinion_question04,
		    x.opinion_question05,
		    x.opinion_question06, 
		    x.opinion_question07, 
		    x.opinion_question08, 
		    x.opinion_question09, 
		    x.opinion_question10, 
		    x.opinion_question11
		from
		    course_opinions x, courses c
		where 
		    c.course_no = x.course_no
		and
		    c.professor_no = #{profId}
		and
		    c.course_term = #{term}
		and
		    c.course_year = #{year}
	</select>
	<!-- 교수번호로 해당학기 제외한 강의 조회 -->
	<select id="getOpCourseByProfId" parameterType="map" resultType="course">
		select
		    course_name name, 
		    course_credit credit,
		    course_no no,
		    course_term term, 
		    course_year year
		from
		    courses
		where
		    professor_no = #{profId}
		minus
		select 
		    course_name, 
		    course_credit,
		    course_no,
		    course_term, 
		    course_year
		from
		    courses
		where
		    professor_no = #{profId}
		and
		    course_term = #{term}
		and
		    course_year = #{year}
	</select>
	<!-- 강의평가 평균점수 -->
	<select id="getOpinionAvg" parameterType="int" resultType="map">
		select 
		    avg(opinion_question01) q1,	 
		    avg(opinion_question02) q2,
		    avg(opinion_question03) q3,
		    avg(opinion_question04) q4,
		    avg(opinion_question05) q5,
		    avg(opinion_question06) q6,
		    avg(opinion_question07) q7,
		    avg(opinion_question08) q8,
		    avg(opinion_question09) q9,
		    avg(opinion_question10) q10
		  
		from
		    course_opinions
		where
		    course_no = #{value}
		group by
		    course_no
	</select>
	<!-- 강의평가 최저점수 조회 -->
	<select id="getOpinionMin" parameterType="int" resultType="map">
		select 
		    min(opinion_question01) q1,	 
		    min(opinion_question02) q2,
		    min(opinion_question03) q3,
		    min(opinion_question04) q4,
		    min(opinion_question05) q5,
		    min(opinion_question06) q6,
		    min(opinion_question07) q7,
		    min(opinion_question08) q8,
		    min(opinion_question09) q9,
		    min(opinion_question10) q10
		  
		from
		    course_opinions
		where
		    course_no = #{value}
		group by
		    course_no
	</select>
	<!-- 강의평가 최고점수 조회 -->
	<select id="getOpinionMax" parameterType="int" resultType="map">
		select 
		    max(opinion_question01) q1,	 
		    max(opinion_question02) q2,
		    max(opinion_question03) q3,
		    max(opinion_question04) q4,
		    max(opinion_question05) q5,
		    max(opinion_question06) q6,
		    max(opinion_question07) q7,
		    max(opinion_question08) q8,
		    max(opinion_question09) q9,
		    max(opinion_question10) q10
		  
		from
		    course_opinions
		where
		    course_no = #{value}
		group by
		    course_no
	</select>
	<!-- 강의평가 기타의견 조회 -->
	<select id="getOpinionComment" parameterType="int" resultType="courseOpinion">
		select 
            opinion_question11 q11
        from 
            course_opinions
        where
            course_no = #{value}
	</select>
	
</mapper>