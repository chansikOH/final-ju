<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="kr.ac.ju.dao.EmployeeDao">
	
	<select id="getEmployeeByNo" parameterType="int" resultType="employee">
		select 
			E.employee_no 				as no,
			E.employee_password			as password, 
			E.employee_name				as name,
			E.employee_gender			as gender,
			E.employee_email 			as email,
			E.employee_phone_number		as phoneNumber,
			E.employee_address			as address,
			E.employee_photo_name		as photoName,
			P.position_name				as "position.name",
			D.department_name 			as "department.name"
		from 
			employees E, position P, departments D 
		where 
			E.department_id = D.department_id
			and E.position_id = P.position_id
			and E.employee_no = #{value}
	</select>
	
	<select id="getAllMajors" resultType="major">
		select 
			major_no 			as no,
			major_name			as name,
			admission_count		as admissionCount,
			major_head			as "head.no",
			major_create_date  	as createDate 
		from 
			majors	
	</select>
	
	<select id="searchStudentsCount" parameterType="map" resultType="int">
		select count(*)
		from students
		<where>
			<if test="status != null">
				student_div = #{status}
			</if>
			<if test="grade != null">
				and student_grade = #{grade}
			</if>
			<if test="major != null">
				and major_no = #{major}
			</if>
			<if test="name != null">
				and student_name = #{name}
			</if>
			<if test="studentNo != null">
				and student_no = #{studentNo}
			</if>
			<if test="tel != null">
				and student_phone_number = #{tel}
			</if>
		</where> 
	</select>
	
	<select id="searchStudents" parameterType="map" resultType="student" >
		select *
		from(
				select 
					A.student_no 				as no,
					A.major_no					as "major.no",
					B.major_name				as "major.name",
					A.professor_no				as "professor.no",
					A.student_name				as name,
					A.student_password			as password,
					A.student_birth				as birth,
					A.student_gender			as gender,
					A.student_email				as email, 
					A.student_phone_number		as phoneNumber,
					A.student_address			as address,
					A.student_grade				as grade,
					A.transfer_yn				as transferYn,
					A.student_create_date		as createDate,
					A.student_div				as division,
					A.student_photo_name 		as photoName,
					row_number() over (order by student_no desc) as rn
				from 
						students A, majors B
				where
					A.major_no = B.major_no
					<if test="status != null">
						and A.student_div = #{status}
					</if>
					<if test="grade != null">
						and A.student_grade = #{grade}
					</if>
					<if test="major != null">
						and A.major_no = #{major}
					</if>
					<if test="name != null">
						and A.student_name = #{name}
					</if>
					<if test="studentNo != null">
						and A.student_no = #{studentNo}
					</if>
					<if test="tel != null">
						and A.student_phone_number = #{tel}
					</if>
				)
		where 
			rn >= #{beginIndex}
			and rn &lt;= #{endIndex}		
	</select> 
	
	<select id="getStudentByNo" parameterType="int" resultType="student">
		select 
			A.student_no 				as no,
			A.major_no					as "major.no",
			B.major_name				as "major.name",
			A.professor_no				as "professor.no",
			A.student_name				as name,
			A.student_password			as password,
			A.student_birth				as birth,
			A.student_gender			as gender,
			A.student_email				as email, 
			A.student_phone_number		as phoneNumber,
			A.student_address			as address,
			A.student_grade				as grade,
			A.transfer_yn				as transferYn,
			A.student_create_date		as createDate,
			A.student_div				as division,
			A.student_photo_name 		as photoName
		from 
			students A, majors B
		where 
			A.student_no = #{value}
			and A.major_no = B.major_no
	</select>
	
	<update id="updateStudentStatusByNo" parameterType="student">
		update 
			students
		set 
			student_div = #{division}
		where 
			student_no = #{no}
	</update>
	
	<select id="getStudentNoSeq" parameterType="int" resultType="int">
		select 
			to_char(sysdate, 'yyyy') || #{value} || lpad(student_seq.nextval, 2, '0') 
		from 
			dual
	</select>
	
	<insert id="insertStudent" parameterType="student"> 
		insert into students
			(student_no, major_no, student_name, student_password, student_birth, student_gender, student_email, student_phone_number, student_address, student_grade, student_photo_name)
		values
			(#{no}, #{major.no}, #{name}, #{birth}, #{birth}, #{gender}, #{email} , #{phoneNumber}, #{address}, #{grade} , #{photoName} )
	</insert> 
	
	<select id="getAllNoticesCount" resultType="int">
		select count(*)
		from notices 
	</select>
	
	<select id="getAllNotices" parameterType="map" resultType="notice">
		select *
		from
			(select	
				notice_no 			as no,
				notice_writer 		as writer,
				notice_title 		as title,
				notice_contents	 	as contents,
				notice_file_name 	as fileName,
				notice_create_date	as createDate,
				row_number() over (order by notice_no desc) as rn
			from 
				notices
			<where>
				<if test="no != null">
					notice_no  = #{no}
				</if>
				<if test="title != null">
					notice_title = #{title}
				</if>
				<if test="createDate != null">
					notice_create_date = #{createDate}
				</if>
			</where>)
		where 
			rn >= #{beginIndex}
			and rn &lt;= #{endIndex}		
	</select>
	
	<select id="getNoticeByNoticeNo" parameterType="int" resultType="notice">
		select	
			notice_no 			as no,
			notice_writer		as writer,
			notice_title 		as title,
			notice_contents 	as contents,
			notice_file_name 	as fileName,
			notice_create_date 	as createDate
		from 
			notices
		where 
			notice_no = #{value}
	</select>
	
	<insert id="addNotice" parameterType="notice">
		insert into notices (notice_no, notice_writer, notice_title, notice_contents, notice_file_name) 
		values (notice_seq.nextval, #{writer}, #{title}, #{contents}, #{fileName})
	</insert>
	
	<select id="getStudentStatusCount" parameterType="map" resultType="int">
		select 
			count(*)
		from 
			students A, majors B, student_status C
		where 
			A.major_no = B.major_no 
			and A.student_no = C.student_no
			<if test="statusDiv != null">
				and A.student_div = #{statusDiv}
			</if>
			<if test="passYn != null">
				and C.pass_yn = #{passYn}
			</if>
			<if test="requestDate != null">
				and to_char(C.student_create_date, 'yyyy-mm-dd') = #{requestDate}
			</if>
			<if test="major != null">
				and B.major_name = #{major}
			</if>
			<if test="name != null">
				and A.student_name = #{name}
			</if>
			<if test="studentNo != null">
				and A.student_no  = #{studentNo}
			</if>
	</select>
	
	<select id="getStudentStatus" parameterType="map" resultType="student" >
		select 
			student_no 	 				as no,
			major_no					as "major.no",
			professor_no				as "professor.no",
			student_name				as name,
			student_div					as division,
			major_name					as "major.name",
			status_no					as "studentStatus.no", 
			start_term  				as "studentStatus.startTerm",
			term_count					as "studentStatus.termCount", 
			status_div					as "studentStatus.division",
			pass_yn						as "studentStatus.passYn", 
			student_create_date			as "studentStatus.createDate"
		from(		select 
					A.student_no,
					A.major_no,
					A.professor_no,
					A.student_name,
					A.student_div,
					B.major_name,
					C.status_no, 
					C.start_term,
					C.term_count,
					C.status_div, 
					C.pass_yn, 
					C.student_create_date, 
					row_number() over (order by C.student_create_date desc) as rn
				from 
					students A, majors B, student_status C
				where 
					A.major_no = B.major_no 
					and A.student_no = C.student_no
					<if test="statusDiv != null">
						and A.student_div = #{statusDiv}
					</if>
					<if test="passYn != null">
						and C.pass_yn = #{passYn}
					</if>
					<if test="requestDate != null">
						and to_char(C.student_create_date, 'yyyy-mm-dd') = #{requestDate}
					</if>
					<if test="major != null">
						and B.major_name = #{major}
					</if>
					<if test="name != null">
						and A.student_name = #{name}
					</if>
					<if test="studentNo != null">
						and A.student_no  = #{studentNo}
					</if>
				)
		where 
			rn >= #{beginIndex}
			and rn &lt;= #{endIndex}		
	</select> 

	<select id="getStatusChangeReaseon" parameterType="int" resultType="string"> 
		select 
			status_contents 
		from 
			student_status 
		where 
			status_no = #{statusNo}
	</select>
	
	<select id="chanageStudentStatusPassyn" parameterType="int">
		update student_status 
		set pass_yn ='P'
		where status_no = #{statusNo}
	</select>
	
	<select id="getStudentsStatistic" parameterType="int" resultType="student"> 
			select 
				A.student_no						as no ,
				A.major_no							as "major.no",
				to_char(A.student_birth,'yyyy')		as	createDate,	
				A.student_gender					as gender,
				A.student_grade						as grade,
				A.transfer_yn						as transferYn,
				B.major_name 						as "major.name"
			from 
				students A, majors B 
			where 
				A.major_no = B.major_no  
			and 
				A.student_no like #{value} || '%'	
	</select>
</mapper>