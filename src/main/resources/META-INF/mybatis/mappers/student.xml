<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="kr.ac.ju.dao.StudentDao">
	
	<resultMap type="student" id="studentResultMap">
		<result property="no" column="student_no"/>
		<result property="major.no" column="major_no"/>
		<result property="professor.no" column="professor_no"/>
		<result property="name" column="student_name"/>
		<result property="password" column="student_password"/>
		<result property="birth" column="student_birth"/>
		<result property="gender" column="student_gender"/>
		<result property="email" column="student_email"/>
		<result property="phoneNumber" column="student_phone_number"/>
		<result property="address" column="student_address"/>
		<result property="grade" column="student_grade"/>
		<result property="transferYn" column="transfer_yn"/>
		<result property="status.no" column="status_no"/>
		<result property="createDate" column="student_create_date"/>
		<result property="division" column="student_div"/>
		<result property="photoName" column="student_photo_name"/>
	</resultMap>
	
	<resultMap type="student" id="studentWithMajorResultMap">
		<result property="no" column="student_no"/>
		<result property="major.no" column="major_no"/>
		<result property="major.name" column="major_name"/>
		<result property="professor.no" column="professor_no"/>
		<result property="name" column="student_name"/>
		<result property="password" column="student_password"/>
		<result property="birth" column="student_birth"/>
		<result property="gender" column="student_gender"/>
		<result property="email" column="student_email"/>
		<result property="phoneNumber" column="student_phone_number"/>
		<result property="address" column="student_address"/>
		<result property="grade" column="student_grade"/>
		<result property="transferYn" column="transfer_yn"/>
		<result property="status.no" column="status_no"/>
		<result property="createDate" column="student_create_date"/>
		<result property="division" column="student_div"/>
		<result property="photoName" column="student_photo_name"/>
	</resultMap>
	
	<resultMap type="java.util.HashMap" id="studentRecoredResultMap">
		<result javaType="java.lang.Integer" property="courseNo" column="course_no"/>
		<result javaType="java.lang.String" property="mustYn" column="course_must_yn"/>
		<result javaType="java.lang.String" property="courseName" column="course_name"/>
		<result javaType="java.lang.String" property="professorName" column="professor_name"/>
		<result javaType="java.lang.Integer" property="credit" column="course_credit"/>
		<result javaType="java.lang.Integer" property="cnt" column="cnt"/>
	</resultMap>
	
	<select id="getStudentByNo" parameterType="int" resultMap="studentWithMajorResultMap">
		select *
		from students S, majors M
		where student_no = #{value}
		and S.major_no = M.major_no
	</select>
	
	<select id="getYearTermsByStudentNo" parameterType="int" resultType="course">
		select distinct	C.course_year as year, 
						C.course_term as term
		from course_attends CA, courses C
		where CA.course_no = C.course_no
			and student_no = #{value}
		order by C.course_year asc
	</select>
	
	<select id="getAllCoursesByStudentNo" parameterType="int" resultType="courseAttend">
		select	S.student_no as "student.no",
				P.professor_name as "course.professor.name",
				C.course_no as "course.no",
				C.course_name as "course.name",
				C.course_credit as "course.credit",
				C.course_year as "course.year",
				C.course_term as "course.term",
				C.course_must_yn as "course.mustYn",
				CA.course_attend_record as record
		from course_attends CA, students S, courses C, professors P
		where S.student_no = CA.student_no
			and C.course_no = CA.course_no
			and P.professor_no = C.professor_no
			and C.course_pass_yn = 'Y'
			and S.student_no = #{value}
		order by C.course_no
	</select>
	
	<select id="getAllCoursesWithProfessorAndMajorByStudentNo" parameterType="map" resultType="course">
		select
			C.course_no no,
			P.professor_name "professor.name",
			M.major_name "major.name",
			C.course_name name,
			C.course_credit credit,
			C.course_year year,
			C.course_term term,
			C.course_must_yn mustYn,
			C.course_pass_yn passYn,
			C.course_create_date createDate,
			C.course_quota quota,
			C.course_count count
		from
			courses C, course_attends CA, professors P, majors M
		where
			C.course_no = CA.course_no
		and
			C.professor_no = P.professor_no
		and
			C.major_no = M.major_no
		and 
			CA.student_no = #{studentNo}
		and
			C.course_year = ${year}
		and
			C.course_term = #{term}
		order by 
			C.course_no
	</select>
	
	<select id="countCurrentCoursesByStudentNo" parameterType="map" resultType="int">
		select
			count(*)
		from
			courses C, course_attends CA
		where
			C.course_no = CA.course_no
		and
			CA.student_no = #{studentNo}
		and
			C.course_year = #{year}
		and 
			C.course_term = #{term}
	</select>

	<select id="getCoursesByStudentNoAndYearTerm" parameterType="map" resultType="courseAttend">
		select	S.student_no as "student.no",
				P.professor_name as "course.professor.name",
				C.course_no as "course.no",
				C.course_name as "course.name",
				C.course_credit as "course.credit",
				C.course_year as "course.year",
				C.course_term as "course.term",
				C.course_must_yn as "course.mustYn",
				CA.course_attend_record as record
		from course_attends CA, students S, courses C, professors P
		where S.student_no = CA.student_no
			and C.course_no = CA.course_no
			and P.professor_no = C.professor_no
			and C.course_pass_yn = 'Y'
			and S.student_no = #{studentNo}
			and C.course_year = #{year}
			and C.course_term = #{term}
		order by C.course_no
	</select>
	
	<select id="getAllRecordesByStudentNo" parameterType="map" resultMap="studentRecoredResultMap">
		select 
			X.course_no as courseNo, 
			Y.course_must_yn as mustYn, 
			Y.course_name as courseName,
			Z.professor_name as professorName,
			Y.course_credit as credit,
			cnt
		from 
			(select 
				CA.STUDENT_NO, 
				C.course_no, 
				sum(TR.RESULT_SCORE) cnt
			 from 
				courses C, 
				professors P, 
				course_attends CA, 
				tests T, 
				test_results TR
			 where 
				CA.student_no = TR.student_no
				and TR.test_no = T.test_no
				and T.course_no = CA.course_no
				and C.professor_no = P.professor_no
				and CA.course_no = C.course_no
				and TR.student_no = #{no}
			 group by 
				CA.STUDENT_NO, 
				C.course_no) X, 
			 Courses Y, 
			 Professors Z 
		where 
			X.course_no =Y.course_no 
			and Y.PROFESSOR_NO = Z.professor_no
			and Y.COURSE_YEAR = '2018'
	</select>
	
	<select id="getStudentInfoByNo" parameterType="int" resultType="student">
		select 
			S.student_no no, 
			M.major_name "major.name", 
			S.student_grade grade, 
			S.student_div division, 
			P.professor_name "professor.name", 
			S.student_phone_number phoneNumber
		from 
			students S, 
			Majors M, 
			professors P
		where 
			S.professor_no = P.professor_no 
			and S.major_no = M.major_no
			and student_no = ${value}
	</select>
	
	<select id="getStudentStatusByNo" parameterType="int" resultType="student">
		select 
			SS.start_term "studentStatus.startTerm", 
			SS.term_count "studentStatus.termCount", 
			M.major_name "major.name", 
			SS.status_div "studentStatus.division", 
			SS.status_contents "studentStatus.contents", 
			SS.student_create_date "studentStatus.createDate", 
			SS.pass_yn "studentStatus.passYn"
		from 
			student_status SS, 
			majors M, 
			students S
		where 
			S.student_no = SS.student_no 
			and S.major_no = M.major_no
			and S.student_no = ${value}
	</select>
	
	<insert id="insertStudentStatus">
		insert into
			student_status
		values
			(student_status_seq.nextval,
			${division},
			${startTerm},
			${termCount},
			'W',
			sysdate,
			${contents}
			${no});
	</insert>
	
</mapper>