<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="kr.ac.ju.dao.DocDao">

	<!-- 직원 로그인 기안서, 휴가계획서, 퇴직서 정보 조회  -->
	<select id="getDocEmployeeByNo" parameterType="map" resultType="hashmap">
		SELECT 
			A.DOC_NO,
			B.DRAFT_TITLE, 
			A.DOC_FILE_YN, 
			C.EMPLOYEE_NAME , 
			D.PROFESSOR_NAME , 
			A.DOC_CREATE_DATE, 
			A.DOC_STATE
		FROM 
			DOCS A, 
			DRAFTS B, 
			EMPLOYEES C, 
			PROFESSORS D
		WHERE
			A.DOC_NO = B.DOCS_NO
		AND 
			A.EMPLOYEE_NO = C.EMPLOYEE_NO
		AND 
			A.DOC_FINAL_PERSON = D.PROFESSOR_NO
		AND 
			A.EMPLOYEE_NO = #{person}
		<choose>
			<when test="option != null and option.equals('P') ">
				and
					A.doc_state == '결재중'
			</when>
			<when test="option != null and option.equals('I') ">
				and
					A.doc_state == '반려'
			</when>
			<when test="option != null and option.equals('C') ">
				and
					A.doc_state == '완료'
			</when>
		</choose>
		UNION
		SELECT 
			A.DOC_NO, 
			'휴가신청서', 
			A.DOC_FILE_YN, 
			C.EMPLOYEE_NAME, 
			D.PROFESSOR_NAME,  
			A.DOC_CREATE_DATE, 
			A.DOC_STATE
		FROM 
			DOCS A,
			VACATIONS B, 
			EMPLOYEES C, 
			PROFESSORS D
		WHERE 
			A.EMPLOYEE_NO = C.EMPLOYEE_NO
		AND 
			A.DOC_FINAL_PERSON = D.PROFESSOR_NO
		AND 
			A.DOC_NO = B.DOCS_NO
		AND 
			A.EMPLOYEE_NO = #{value}
		UNION
		SELECT 
			A.DOC_NO, 
			'퇴직신청서', 
			A.DOC_FILE_YN, 
			B.EMPLOYEE_NAME, 
			C.PROFESSOR_NAME, 
			A.DOC_CREATE_DATE, 
			A.DOC_STATE 
		FROM 
			DOCS A, 
			EMPLOYEES B, 
			PROFESSORS C,
			RETIRES D
		WHERE 
			A.EMPLOYEE_NO = B.EMPLOYEE_NO
		AND 
			A.DOC_FINAL_PERSON = C.PROFESSOR_NO
		AND 
			A.DOC_NO = D.DOCS_NO
		AND
			A.EMPLOYEE_NO = #{value}
	</select>
	 
	<!-- SEQ 생성 -->
	<select id="getDocSeq" resultType="int">
		select 
			doc_detail_seq.nextval
		from
			dual
	</select>
	
	<!-- 사원 전체 조회 -->
	<select id="getAllEmployees" resultType="employee">
		SELECT 
			A.employee_no as no, 
			B.position_id as "position.id",
			A.employee_name as "name" , 
			B.POSITION_NAME as "position.name"
		FROM 
			employees A, position B
		where 
			A.position_id = B.position_id
		order by B.position_level desc, A.employee_name asc
	</select>
	
	<!-- 직원 결재문서등록 Doc -->
	<insert id="insertDoc" parameterType="doc">
		insert into Docs
			(doc_no, 
			employee_no, 
			doc_state, 
			doc_middle_person,
			doc_final_person,
			doc_file_yn)
		values
			(#{no},
			 #{employee.no}, 
			 #{state},
			 #{middlePerson},
			 #{finalPerson},
			 #{fileYn})
	</insert>
	
	<!-- docs_no 가져오기?? -->
	<select id="getdocs" parameterType="int" resultType="doc">
		select 
			doc_no as no, 
			employee_no as employee, 
			doc_create_date as createDate, 
			doc_state as state, 
			doc_final_person as finalPerson, 
			doc_file_yn as fileYn,  
			doc_middle_person as middlePerson 
		from 
			docs
		where 
			doc_no = #{value}
	</select>
	
	<!-- 직원 기안서 등록 Drafts-->
	<insert id="insertDraft" parameterType="draft">
		insert into Drafts
			(draft_no, 
			draft_title, 
			draft_contents,
			draft_start_date,
			draft_keeping_year,
			docs_no)
		values
			(doc_detail_seq.nextval,
			#{title}, 
			#{contents}, 
			#{startDate},
			#{keepingYear},
			#{doc.no})
	</insert>
	
	<!-- 직원 기안서 상세정보 -->
	<select id="getDraftByNo" parameterType="int" resultType="draft">
		SELECT
		    D.DOC_MIDDLE_PERSON,
		    D.DOC_FINAL_PERSON,
		    R.DRAFT_TITLE,
		    R.DRAFT_CONTENTS,
		    F.FILE_NAME,
		    R.DRAFT_KEEPING_YEAR,
		    R.DRAFT_START_DATE
		FROM
		    DOCS D, DRAFTS R, DOC_FILES F
		WHERE
		    D.DOC_NO = R.DOCS_NO
		AND
		    D.DOC_NO = F.DOC_NO(+)
		AND
		    D.DOC_no = #{value}
	</select>
	
	<!-- 직원 결재선 등록 -->
	<insert id="insertDocLine" parameterType="docLine">
		insert into Doc_lines
			(doc_line_no, 
			person_no,
			doc_no)
		values
			(doc_line_seq.nextval, 
			#{person.no},
			#{doc.no})
	</insert>
	
	<!-- 직원 파일 등록 -->
	<insert id="insertDocfile" parameterType="docFile">
		insert into Doc_files
			(doc_file_no, 
			doc_no, 
			file_name)
		values
			(doc_file_seq.nextval,
			#{doc.no},
			#{fileName})
	</insert>
	
	<!-- 직원 퇴직서 등록  -->
	<insert id="insertRetire" parameterType="retire">
	insert into retires
		(retire_no, 
		retire_div, 
		retire_contents,
		retire_date, 
		docs_no)
	values
		(doc_detail_seq.nextval,
		#{div}, 
		#{contents}, 
		#{retireDate}, 
		#{doc.no})
	</insert>
	
	<!-- 직원 퇴직서 상세정보 -->
	<select id="getRetireByNo" parameterType="int" resultType="retire">
	SELECT
	    D.DOC_MIDDLE_PERSON,
	    D.DOC_FINAL_PERSON,
	    R.RETIRE_DIV,
	    R.RETIRE_DATE,
	    R.RETIRE_CONTENTS,
	    F.FILE_NAME
	FROM
	    DOCS D, RETIRES R, DOC_FILES F
	WHERE
	    D.DOC_NO = R.DOCS_NO
	AND
	    D.DOC_NO = F.DOC_NO(+)
	AND
	    R.DOCS_NO = #{value}
	</select>
	
	<!-- 직원 휴가등록 -->
	<insert id="insertVacation" parameterType="vacation">
	insert into vacations
		(vacation_no,
		 vacation_div
		vacation_contents, 
		vacation_start_date, 
		vacation_end_date, 
		docs_nos)
	values
		(doc_detail_seq.nextval,
		#{div}, 
		#{contents}, 
		#{startDate}, 
		#{endDate},
		#{doc.no})
	</insert>
	
	<!-- 직원 휴가계획 상세정보 -->
	<select id="getVacationByNo" parameterType="int" resultType="vacation">
		   SELECT
			    D.DOC_MIDDLE_PERSON,
			    D.DOC_FINAL_PERSON,
			    V.vacation_div,
			    V.vacation_start_date,
			    V.vacation_end_date,
			    V.vacation_contents,
			    F.FILE_NAME
			FROM
			    DOCS D, vacations V, DOC_FILES F
			WHERE
			    D.DOC_NO = V.DOCS_NO
			AND
			    D.DOC_NO = F.DOC_NO(+)
			AND
			    V.DOCS_NO = #{value}
	</select>
	
	<!-- 직원 기안서 수정 -->
	<!-- <update id="" parameterType="">
		update drafts
		set 
			return_reason = #{returnReason}
		where 
			draft_no = #{no}
			
	</update>
	직원 휴가서 수정
	<update id="">
		update vacation 
		set
			return_reason = #{returnReason}
		where
			docs_no = #{no}
	</update>
	
	직원 퇴직서 수정
	<update id="">
		update retires
		set
			return_reson = #{returnReason}
		where
			docs_no = #{no}
	</update> -->
	
</mapper>