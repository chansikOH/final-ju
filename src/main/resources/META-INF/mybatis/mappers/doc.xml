<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.ac.ju.dao.DocDao">

	<!-- 직원 로그인 기안서, 휴가계획서, 퇴직서 정보 조회  -->
	<select id="getDocEmployeeByNo" parameterType="map" resultType="hashmap">
		SELECT 
         A.DOC_NO, 
         B.DRAFT_TITLE, 
         A.DOC_FILE_YN, 
         C.EMPLOYEE_NAME EMPLOYEE_NAME, 
         D.EMPLOYEE_NAME EMPLOYEE_NAME_1, 
         A.DOC_CREATE_DATE, 
         A.DOC_STATE
      FROM 
         DOCS A, 
         DRAFTS B, 
         EMPLOYEES C, 
         EMPLOYEES D
      WHERE 
         A.DOC_NO = B.DOCS_NO
      AND 
         A.EMPLOYEE_NO = C.EMPLOYEE_NO
      AND 
         A.DOC_FINAL_PERSON = D.EMPLOYEE_NO
      AND 
         A.EMPLOYEE_NO = #{value}
		<choose>
			<when test="option != null and option.equals('P') ">
				and
					A.doc_state == '결재중'
			</when>
			<when test="option != null and option.equals('I') ">
				and
					A.doc_state == '반려'
			</when>
			<when test="option != null and option.equals('C') ">
				and
					A.doc_state == '완료'
			</when>
		</choose>
		UNION
		SELECT 
         A.DOC_NO, 
         '휴가신청서', 
         A.DOC_FILE_YN, 
         C.EMPLOYEE_NAME EMPLOYEE_NAME, 
         D.EMPLOYEE_NAME EMPLOYEE_NAME_1,  
         A.DOC_CREATE_DATE, 
         A.DOC_STATE
      FROM 
         DOCS A,
         VACATIONS B, 
         EMPLOYEES C,
         EMPLOYEES D
      WHERE 
         A.EMPLOYEE_NO = C.EMPLOYEE_NO
      AND 
         A.DOC_FINAL_PERSON = D.EMPLOYEE_NO
      AND 
         A.DOC_NO = B.DOCS_NO
      AND 
         A.EMPLOYEE_NO = #{value}
			<choose>
			<when test="option != null and option.equals('P') ">
				and
					A.doc_state == '결재중'
			</when>
			<when test="option != null and option.equals('I') ">
				and
					A.doc_state == '반려'
			</when>
			<when test="option != null and option.equals('C') ">
				and
					A.doc_state == '완료'
			</when>
		</choose>
		UNION
		SELECT 
         A.DOC_NO, 
         '퇴직신청서', 
         A.DOC_FILE_YN, 
         B.EMPLOYEE_NAME EMPLOYEE_NAME, 
         C.EMPLOYEE_NAME EMPLOYEE_NAME_1, 
         A.DOC_CREATE_DATE, 
         A.DOC_STATE 
      FROM 
         DOCS A, 
         EMPLOYEES B, 
         EMPLOYEES C,
         RETIRES D
      WHERE 
         A.EMPLOYEE_NO = B.EMPLOYEE_NO
      AND 
         A.DOC_FINAL_PERSON = C.EMPLOYEE_NO
      AND 
         A.DOC_NO = D.DOCS_NO
      AND
         A.EMPLOYEE_NO = #{value}
			<choose>
			<when test="option != null and option.equals('P') ">
				and
					A.doc_state = '결재중'
			</when>
			<when test="option != null and option.equals('I') ">
				and
					A.doc_state = '반려'
			</when>
			<when test="option != null and option.equals('C') ">
				and
					A.doc_state = '완료'
			</when>
		</choose>
	</select>
	 
	<!-- SEQ 생성 -->
	<select id="getDocSeq" resultType="int">
		select 
			doc_detail_seq.nextval
		from
			dual
	</select>
	
	<!-- 사원 전체 조회 -->
	<select id="getAllEmployees" resultType="employee">
		SELECT 
			A.employee_no as no, 
			B.position_id as "position.id",
			A.employee_name as "name" , 
			B.POSITION_NAME as "position.name"
		FROM 
			employees A, position B
		where 
			A.position_id = B.position_id
		order by B.position_level desc, A.employee_name asc
	</select>
	
	<!-- 직원 결재문서등록 Doc -->
	<insert id="insertDoc" parameterType="doc">
		insert into Docs
			(doc_no, 
			employee_no, 
			doc_state, 
			doc_middle_person,
			doc_final_person,
			doc_file_yn)
		values
			(#{no},
			 #{employee.no}, 
			 #{state},
			 #{middlePerson},
			 #{finalPerson},
			 #{fileYn})
	</insert>
	
	<!-- docs_no 가져오기?? -->
	<select id="getdocs" parameterType="int" resultType="doc">
		select 
			doc_no as no, 
			employee_no as employee, 
			doc_create_date as createDate, 
			doc_state as state, 
			doc_final_person as finalPerson, 
			doc_file_yn as fileYn,  
			doc_middle_person as middlePerson 
		from 
			docs
		where 
			doc_no = #{value}
	</select>
	
	<!-- 직원 기안서 등록 Drafts-->
	<insert id="insertDraft" parameterType="draft">
		insert into Drafts
			(draft_no, 
			draft_title, 
			draft_contents,
			draft_start_date,
			draft_keeping_year,
			docs_no)
		values
			(doc_detail_seq.nextval,
			#{title}, 
			#{contents}, 
			#{startDate},
			#{keepingYear},
			#{doc.no})
	</insert>
	
	<!-- 직원 기안서 상세정보 -->
	<select id="getDraftByNo" parameterType="int" resultType="hashmap">
		SELECT
		    R.DRAFT_NO,
		    M.EMPLOYEE_NAME MIDDLE_PERSON_NAME,
		    F.EMPLOYEE_NAME FINAL_PERSON_NAME,
		    R.DRAFT_TITLE,
		    R.DRAFT_CONTENTS,
		    R.DRAFT_KEEPING_YEAR,
		    R.DRAFT_START_DATE
		FROM 
			EMPLOYEES M, EMPLOYEES F, DRAFTS R, DOCS D
		WHERE 
			R.DOCS_NO = D.DOC_NO 
		AND 
			D.DOC_MIDDLE_PERSON = M.EMPLOYEE_NO 
		AND 
			D.DOC_FINAL_PERSON = F.EMPLOYEE_NO 
		AND 
			D.DOC_NO = #{VALUE}
	</select>
	
	<!-- 직원 결재선 등록 -->
	<insert id="insertDocLine" parameterType="docLine">
		insert into Doc_lines
			(doc_line_no, 
			person_no,
			doc_no)
		values
			(doc_line_seq.nextval, 
			#{person.no},
			#{doc.no})
	</insert>
	
	<!-- 직원 파일 등록 -->
	<insert id="insertDocfile" parameterType="docFile">
		insert into Doc_files
			(doc_file_no, 
			doc_no, 
			file_name)
		values
			(doc_file_seq.nextval,
			#{doc.no},
			#{fileName})
	</insert>
	
	<!-- 직원 퇴직서 등록  -->
	<insert id="insertRetire" parameterType="retire">
	insert into retires
		(retire_no, 
		retire_div, 
		retire_contents,
		retire_date, 
		docs_no)
	values
		(doc_detail_seq.nextval,
		#{div}, 
		#{contents}, 
		#{retireDate}, 
		#{doc.no})
	</insert>
	
	<!-- 직원 퇴직서 상세정보 -->
	<select id="getRetireByNo" parameterType="int" resultType="hashmap">
	SELECT
		R.RETIRE_NO,
		M.EMPLOYEE_NAME MIDDLE_PERSON_NAME,
		F.EMPLOYEE_NAME FINAL_PERSON_NAME,
		R.RETIRE_DIV RETIRE_DIV,
		R.RETIRE_DATE RETIRE_DATE,
		R.RETIRE_CONTENTS RETIRE_CONTENTS
	FROM 
		EMPLOYEES M, EMPLOYEES F, RETIRES R, DOCS D
	WHERE 
		R.DOCS_NO = D.DOC_NO
	AND 
		D.DOC_MIDDLE_PERSON = M.EMPLOYEE_NO
	AND 
		D.DOC_FINAL_PERSON = F.EMPLOYEE_NO
	AND 
		R.DOCS_NO = #{VALUE}
	</select>
	
	<!-- 직원 휴가등록 -->
	<insert id="insertVacation" parameterType="vacation">
	insert into vacations
		(vacation_no,
		 vacation_div,
		vacation_contents, 
		vacation_start_date, 
		vacation_end_date, 
		docs_no)
	values
		(doc_detail_seq.nextval,
		#{div}, 
		#{contents}, 
		#{startDate}, 
		#{endDate},
		#{doc.no})
	</insert>
	
	<!-- 직원 휴가계획 상세정보 -->
	<select id="getVacationByNo" parameterType="int" resultType="hashmap">
		   SELECT
				V.VACATION_NO,
				M.EMPLOYEE_NAME MIDDLE_PERSON_NAME,
				F.EMPLOYEE_NAME FINAL_PERSON_NAME,
				V.VACATION_DIV VACATION_DIV,
				V.VACATION_START_DATE START_DATE,
				V.VACATION_END_DATE END_DATE,
				V.VACATION_CONTENTS CONTENTS
			FROM 
				EMPLOYEES M, EMPLOYEES F, VACATIONS V, DOCS D
			WHERE 
				V.DOCS_NO = D.DOC_NO
			AND 
				D.DOC_MIDDLE_PERSON = M.EMPLOYEE_NO
			AND 
				D.DOC_FINAL_PERSON = F.EMPLOYEE_NO
			AND 
				V.DOCS_NO = #{VALUE}
	</select>
	
	<!-- 직원 기안서 수정 -->
	<update id="updateDraft" parameterType="draft">
		update drafts
		set
			draft_title = #{title},
			draft_contents = #{contents},
		where 
			docs_no = #{value}
			
	</update>
	
	<!-- 직원 휴가서 수정 -->
	<update id="updateVacation" parameterType="vacation">
		update vacations 
		set
			vacation_contents = #{contents}
			vacation_start_date = #{startDate}
			vacation_end_date = #{endDate}
		where
			docs_no = #{value}
	</update>
	
	<!-- 직원 퇴직서 수정 -->
	<update id="updateRetire" parameterType="retire">
		update retires
		set
			retire_contents
			retire_date
		where
			docs_no = #{value}
	</update>
	
</mapper>